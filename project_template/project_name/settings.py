"""
Django settings for {{ project_name }} project.

Generated by 'stem-app create' using Django {{ django_version }}.

For more information on this file, see
https://docs.djangoproject.com/en/{{ django_version }}/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/{{ django_version }}/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import traceback

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PROJECT_ROOT = os.path.normpath(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


# Quick-start development settings - unsuitable for production
# Recommendations at https://stemjs.org/docs/establishment/recommended-settings
# Django docs: https://docs.djangoproject.com/en/{{ django_version }}/howto/deployment/checklist/

# SECURITY WARNING!
# If you run this codebase in production, make sure to protect this key, using one that's not in the codebase
SECRET_KEY = '{{ secret_key }}'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = [{{ allowed_hosts }}]

ADMINS = [{{ admin_accounts }}]

AUTH_USER_MODEL = "{{ project_main_app }}.User"

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "django.contrib.sitemaps",
    "django.contrib.sites",

    "establishment.accounts",
    "establishment.socialaccount",
    "establishment.localization",
    "establishment.errors",
    "establishment.content",
    "establishment.baseconfig",
    "establishment.documentation",
    "establishment.emailing",
    "establishment.chat",
    "establishment.blog",
    "establishment.forum",
    "establishment.misc",

    "{{project_main_app}}",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    "establishment.funnel.middleware.VisitorMiddleware",
    "establishment.errors.middleware.ErrorMessageProcessingMiddleware",
]

ROOT_URLCONF = '{{ project_name }}.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                "establishment.misc.context_processors.websocket_url",
                "establishment.misc.context_processors.user_json",
                "{{ project_main_app }}.context_processor.default",
            ],
        },
    },
]

PUBLIC_STATE_COLLECTORS = ["establishment.baseconfig.utils.export_to_public_state"]

PUBLIC_STATE_PATHS = [
    (
        os.path.join(PROJECT_ROOT, "{{project_main_app}}/templates/PublicState.jstemplate"),
        os.path.join(PROJECT_ROOT, "{{project_main_app}}/static/js/PublicState.js")
    ),
]

AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `accounts`
    "django.contrib.auth.backends.ModelBackend",
    # `accounts` specific authentication methods, such as login by e-mail
    "establishment.accounts.auth_backends.AuthenticationBackend",
)

SOCIAL_ACCOUNT_PROVIDERS = {
    "google": {
        "SCOPE": ["profile", "email"],
        "AUTH_PARAMS": {
            "access_type": "online"
        }
    },
    "facebook": {
        "SCOPE": ["email"],
        "METHOD": "oauth2",
        "VERIFIED_EMAIL": True,
        "VERSION": "v2.7"
    }
}

WSGI_APPLICATION = '{{ project_name }}.wsgi.application'


SESSION_ENGINE = "redis_sessions.session"
SESSION_REDIS_PREFIX = "session"
SESSION_REDIS_SOCKET_TIMEOUT = 1.0

# Database configuration
# By default empty, needs to be specified in local_settings.py
# https://docs.djangoproject.com/en/{{ django_version }}/ref/settings/#databases
DATABASES = {
}


REDIS_CONNECTION = {
    "host": "localhost",
    "port": 6379,
    "db": 0,
    "password": None,
}

REDIS_CONNECTION_WEBSOCKETS = REDIS_CONNECTION
REDIS_CONNECTION_CACHING = REDIS_CONNECTION
REDIS_CONNECTION_LOGGING = REDIS_CONNECTION
REDIS_CONNECTION_SERVICES = REDIS_CONNECTION
REDIS_CONNECTION_JOBS = REDIS_CONNECTION


DEFAULT_HTTP_PROTOCOL = "https"
EMAIL_CONFIRMATION_EXPIRE_DAYS = 3
SESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 3


# Password validation
# https://docs.djangoproject.com/en/{{ django_version }}/ref/settings/#auth-password-validators

# AUTH_PASSWORD_VALIDATORS = [
#     {
#         'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
#     },
# ]


# Internationalization
# https://docs.djangoproject.com/en/{{ django_version }}/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/{{ django_version }}/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static/")

SITE_ID = 1

try:
    from .local_settings import *
except Exception as e:
    print("Failed to load local_settings!\n", format(e), "\n" + traceback.format_exc())